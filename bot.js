const path = require('path');  // M√≥dulo nativo do Node.js
const whatsapp = require('whatsapp-web.js');  // Importando o pacote inteiro
const qrcode = require('qrcode');  // M√≥dulo externo
const fs = require('fs');  // M√≥dulo nativo do Node.js
const { exec } = require('child_process');  // Para abrir o QR code sem o m√≥dulo 'open'

// Obt√©m o diret√≥rio onde o execut√°vel est√° sendo executado
const execDir = process.pkg ? path.dirname(process.execPath) : __dirname;

// Estrutura de diret√≥rios externa ao execut√°vel
const logsDir = path.join(execDir, 'logs');
const configDir = path.join(execDir, 'config');
const tempDir = path.join(execDir, 'temp');

// Criar diret√≥rios necess√°rios se n√£o existirem
const diretoriosNecessarios = [logsDir, configDir, tempDir];
diretoriosNecessarios.forEach(dir => {
    if (!fs.existsSync(dir)) {
        try {
            fs.mkdirSync(dir, { recursive: true });
            console.log(`üìÅ Diret√≥rio criado: ${dir}`);
        } catch (err) {
            console.error(`‚ö†Ô∏è N√£o foi poss√≠vel criar diret√≥rio: ${dir}`, err);
        }
    }
});

// Caminhos para arquivos externos ao execut√°vel
const numerosPath = path.join(configDir, 'numeros.txt');
const mensagemPath = path.join(configDir, 'mensagem.txt');
const logPath = path.join(logsDir, `log_${new Date().toISOString().replace(/[:.]/g, '-')}.txt`);
const qrCodePath = path.join(tempDir, 'qrcode.png');

// Verifica e cria arquivos de exemplo se n√£o existirem
function criarArquivoExemplo(filePath, conteudo) {
    if (!fs.existsSync(filePath)) {
        try {
            fs.writeFileSync(filePath, conteudo);
            console.log(`üìÑ Arquivo de exemplo criado: ${filePath}`);
        } catch (err) {
            console.error(`‚ö†Ô∏è N√£o foi poss√≠vel criar arquivo de exemplo: ${filePath}`, err);
        }
    }
}

// Criar arquivos de exemplo se n√£o existirem
criarArquivoExemplo(numerosPath, "5511999999999\n5511888888888\n// Adicione um n√∫mero de telefone por linha (sem espa√ßos ou caracteres especiais)");
criarArquivoExemplo(mensagemPath, "Ol√°! Esta √© uma mensagem de exemplo.\nModifique este arquivo com sua mensagem real.\n\nAtenciosamente,\nSeu Nome");

process.on('uncaughtException', (err) => {
    console.error('‚ùå Erro inesperado:', err);
    writeLog(`\n=== ERRO CR√çTICO ===\n${err.message}\n${err.stack}\n==================\n`);
    process.exit(1);
});

process.on('unhandledRejection', (err) => {
    console.error('‚ùå Rejei√ß√£o n√£o tratada:', err);
    writeLog(`\n=== REJEI√á√ÉO N√ÉO TRATADA ===\n${err.message}\n${err.stack}\n==================\n`);
    process.exit(1);
});

const { Client, LocalAuth } = whatsapp;  // Desestrutura√ß√£o

// Definindo o caminho do Chrome com base no sistema operacional
let chromePath;
if (process.platform === 'win32') {
    // Windows - verificando ambos os caminhos comuns
    const path1 = 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe';
    const path2 = 'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe';
    
    if (fs.existsSync(path1)) {
        chromePath = path1;
    } else if (fs.existsSync(path2)) {
        chromePath = path2;
    }
} else if (process.platform === 'darwin') {
    // macOS
    chromePath = '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';
} else {
    // Linux
    chromePath = '/usr/bin/google-chrome';
}

console.log(`\n=== BOT DE WHATSAPP ===`);
console.log(`üîç Usando navegador Chrome em: ${chromePath || "Caminho padr√£o"}`);
console.log(`üìÇ Diret√≥rio principal: ${execDir}`);
console.log(`üìÑ Arquivo de n√∫meros: ${numerosPath}`);
console.log(`üìÑ Arquivo de mensagem: ${mensagemPath}`);
console.log(`üìù Logs ser√£o salvos em: ${logsDir}`);

// Diret√≥rio personalizado para a sess√£o do WhatsApp
const sessionDir = path.join(execDir, '.wwebjs_auth');

const client = new Client({
    authStrategy: new LocalAuth({
        dataPath: sessionDir  // Define um diret√≥rio externo para a sess√£o
    }),
    puppeteer: {
        headless: false,
        executablePath: chromePath,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
});

// Fun√ß√£o de ajuda para escrever logs com seguran√ßa
function writeLog(message) {
    try {
        fs.appendFileSync(logPath, message);
        return true;
    } catch (err) {
        console.error('‚ö†Ô∏è Erro ao escrever log:', err.message);
        return false;
    }
}

console.log("\nüõë Iniciando WhatsApp Bot... aguarde...");
client.on('qr', qr => {
    console.log("üîé Escaneie o QR Code abaixo para conectar:");

    qrcode.toFile(qrCodePath, qr, {
        errorCorrectionLevel: 'H',
        type: 'png',
        quality: 0.92
    }, (err) => {
        if (err) {
            console.error('‚ö† Erro ao gerar o QR Code:', err);
        } else {
            console.log(`üü¢ QR Code gerado como "${qrCodePath}". Abrindo a imagem para escanear...`);
            
            // Abrindo o QR code usando o m√©todo nativo do sistema operacional
            try {
                if (process.platform === 'win32') {
                    exec(`start "" "${qrCodePath}"`);
                } else if (process.platform === 'darwin') {
                    exec(`open "${qrCodePath}"`);
                } else {
                    exec(`xdg-open "${qrCodePath}"`);
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è N√£o foi poss√≠vel abrir o QR Code automaticamente. Por favor, abra o arquivo "${qrCodePath}" manualmente.`);
            }
        }
    });
});

client.on('ready', async () => {
    console.log("‚úÖ Bot do WhatsApp est√° pronto para enviar mensagens!");

    try {
        // Recarregar os arquivos a cada execu√ß√£o para obter as vers√µes mais recentes
        console.log(`üìÇ Verificando arquivos de configura√ß√£o...`);
        
        // Verificando se os arquivos existem antes de tentar l√™-los
        if (!fs.existsSync(numerosPath)) {
            throw new Error(`Arquivo de n√∫meros n√£o encontrado em: ${numerosPath}. Por favor, crie o arquivo com um n√∫mero por linha.`);
        }
        
        if (!fs.existsSync(mensagemPath)) {
            throw new Error(`Arquivo de mensagem n√£o encontrado em: ${mensagemPath}. Por favor, crie o arquivo com sua mensagem.`);
        }

        // L√™ os n√∫meros de telefone do arquivo externo
        console.log(`üì± Lendo n√∫meros de: ${numerosPath}`);
        const conteudoNumeros = fs.readFileSync(numerosPath, 'utf8');
        
        // Filtra linhas comentadas e vazias
        const numeros = conteudoNumeros.split('\n')
            .map(n => n.trim())
            .filter(n => n !== '' && !n.startsWith('//'))
            .map(n => {
                // Formata o n√∫mero para o formato do WhatsApp
                let numero = n.replace(/\D/g, ''); // Remove n√£o-d√≠gitos
                return numero + "@c.us";
            });

        if (numeros.length === 0) {
            throw new Error(`Arquivo de n√∫meros em ${numerosPath} est√° vazio ou n√£o cont√©m n√∫meros v√°lidos.`);
        }
        console.log(`üì± Encontrados ${numeros.length} n√∫meros para envio.`);

        // L√™ a mensagem do arquivo externo
        console.log(`üí¨ Lendo mensagem de: ${mensagemPath}`);
        const mensagem = fs.readFileSync(mensagemPath, 'utf8');
        if (!mensagem || mensagem.trim() === '') {
            throw new Error(`Arquivo de mensagem em ${mensagemPath} est√° vazio.`);
        }
        console.log(`üí¨ Mensagem carregada (${mensagem.length} caracteres).`);

        // Iniciar o arquivo de log com cabe√ßalho
        const inicioLog = `=== REGISTRO DE ENVIO DE MENSAGENS ===\nIniciado em: ${new Date().toLocaleString('pt-BR')}\nQuantidade de n√∫meros: ${numeros.length}\n\n`;
        writeLog(inicioLog);

        let mensagensEnviadas = 0;
        let mensagensNaoEnviadas = 0;

        console.log(`\nüì§ Iniciando envio para ${numeros.length} n√∫meros...`);
        writeLog(`\n--- DETALHES DO ENVIO ---\n`);

        for (let i = 0; i < numeros.length; i++) {
            const numero = numeros[i];
            console.log(`üì§ Processando ${i+1}/${numeros.length}: ${numero}`);
            
            if (numero) {
                try {
                    const contato = await client.getNumberId(numero);
                    if (contato) {
                        await client.sendMessage(contato._serialized, mensagem);
                        console.log(`‚úÖ Mensagem enviada para ${numero}`);

                        const dataHora = new Date();
                        const logData = `\nDate: ${dataHora.toLocaleDateString('pt-BR')}\nTime: ${dataHora.toLocaleTimeString('pt-BR')}\nPhone Number: ${numero}\nStatus: Enviado com sucesso\n---\n`;
                        writeLog(logData);
                        mensagensEnviadas++;
                    } else {
                        console.log(`‚ùå O n√∫mero ${numero} N√ÉO possui WhatsApp.`);
                        const logData = `\nDate: ${new Date().toLocaleDateString('pt-BR')}\nTime: ${new Date().toLocaleTimeString('pt-BR')}\nPhone Number: ${numero}\nStatus: N√£o possui WhatsApp\n---\n`;
                        writeLog(logData);
                        mensagensNaoEnviadas++;
                    }
                } catch (erro) {
                    console.log(`‚ùå Erro ao enviar para ${numero}: ${erro.message}`);
                    const logData = `\nDate: ${new Date().toLocaleDateString('pt-BR')}\nTime: ${new Date().toLocaleTimeString('pt-BR')}\nPhone Number: ${numero}\nStatus: Erro - ${erro.message}\n---\n`;
                    writeLog(logData);
                    mensagensNaoEnviadas++;
                }
                
                // Adiciona um pequeno delay entre mensagens para evitar bloqueios
                await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));
            }
        }

        const resumoLog = `\n=== RESUMO DO ENVIO ===\nTotal de n√∫meros processados: ${numeros.length}\nTotal de mensagens enviadas: ${mensagensEnviadas}\nTotal de mensagens n√£o enviadas: ${mensagensNaoEnviadas}\nFinalizado em: ${new Date().toLocaleString('pt-BR')}\n===============================\n`;
        writeLog(resumoLog);

        console.log("\nüìä RESUMO DO ENVIO:");
        console.log(`üì± Total de n√∫meros processados: ${numeros.length}`);
        console.log(`‚úÖ Total de mensagens enviadas: ${mensagensEnviadas}`);
        console.log(`‚ùå Total de mensagens n√£o enviadas: ${mensagensNaoEnviadas}`);
        console.log(`üìù Log completo salvo em: ${logPath}`);
        console.log("‚úÖ Processo de envio conclu√≠do!");

    } catch (error) {
        console.error(`\n‚ùå ERRO CR√çTICO: ${error.message}`);
        writeLog(`\n=== ERRO CR√çTICO ===\n${error.message}\n${error.stack}\n==================\n`);
    }

    // Aguarda entrada do usu√°rio para encerrar
    console.log("\nüîÑ O programa continuar√° em execu√ß√£o para manter a sess√£o do WhatsApp ativa.");
    console.log("üõë Para encerrar, pressione CTRL+C ou feche esta janela.");
    console.log("üí° Para enviar mais mensagens, edite os arquivos de configura√ß√£o e reinicie o programa.");
    
    // Mant√©m o processo rodando
    setInterval(() => {}, 1000);
});

client.initialize();